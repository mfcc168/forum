import { NextRequest } from 'next/server'
import { withDALAndValidation } from '@/lib/database/middleware'
import { ApiResponse } from '@/lib/utils/validation'
import { createForumPostSchema, forumQuerySchema, type ForumQueryData, type CreateForumPostData } from '@/lib/schemas/forum'
import { DAL } from '@/lib/database/dal'
import type { ServerUser, PermissionUser } from "@/lib/types"
import { revalidateTag } from 'next/cache'
import { generateForumMetaDescription } from '@/lib/utils/meta'
import { PermissionChecker } from '@/lib/utils/permissions'

export const runtime = 'nodejs'

// GET - Fetch forum posts with enhanced filtering and batch stats
export const GET = withDALAndValidation(
  async (request: NextRequest, { user, validatedData, dal }: { user?: ServerUser; validatedData: ForumQueryData; dal: typeof DAL }) => {
    const { page, limit, category, search, sortBy, status } = validatedData

    try {
      // Use DAL instead of direct database queries
      const result = await dal.forum.getPosts(
        { category, search, sortBy, status },
        { page, limit },
        user?.id
      )

      return ApiResponse.success({
        forumPosts: result.data,
        pagination: result.pagination,
        filters: { category, search, sortBy, status }
      })
    } catch (error) {
      throw error
    }
  },
  {
    schema: forumQuerySchema,
    auth: 'optional',
    rateLimit: { requests: 50, window: '1m' }
  }
)

// POST - Create new forum post with enhanced validation
export const POST = withDALAndValidation(
  async (request: NextRequest, { user, validatedData, dal }: { user?: ServerUser; validatedData: CreateForumPostData; dal: typeof DAL }) => {
    if (!user) {
      return ApiResponse.error('Authentication required', 401)
    }

    // Use centralized permission system - all members can create forum posts
    const permissionUser: PermissionUser = { id: user.id, role: user.role }
    if (!PermissionChecker.canCreate(permissionUser, 'forum')) {
      return ApiResponse.error('You do not have permission to create forum posts', 403)
    }


    // Look up category ObjectId from name
    try {
      const categories = await dal.forum.getCategories()
      
      const category = categories.find(cat => cat.name === validatedData.category)
      
      if (!category) {
        return ApiResponse.error('Category not found', 400)
      }

      // Create post using DAL with automatic stats updates
      const now = new Date()
      const excerpt = validatedData.content.substring(0, 200)
      const metaDescription = generateForumMetaDescription(validatedData.content)
      
      // Remove slug from postData since DAL auto-generates it
      const postData = {
        ...validatedData,
        id: '', // Will be set by DAL
        excerpt,
        metaDescription,
        // slug is auto-generated by createPost method
        category: category.id,
        author: {
          id: user.id,
          name: user.name || user.email || 'Unknown User',
          avatar: user.avatar
        },
        categoryName: validatedData.category,
        status: 'published' as const,
        isPinned: validatedData.isPinned || false,
        isLocked: validatedData.isLocked || false,
        createdAt: now.toISOString(),
        updatedAt: now.toISOString()
      }
      
      
      const postId = await DAL.forum.createPost(postData)

      // Get the created post with stats (by ID, then we'll also try by slug)
      const post = await dal.forum.getPostWithStats(postId, user.id)
      
      // Revalidate relevant cache tags after creating a post
      revalidateTag('forum-posts')
      revalidateTag('forum-stats')
      revalidateTag('forum-categories')

      return ApiResponse.success(
        { forumPost: post },
        'Post created successfully'
      )
      
    } catch (error) {
      throw error
    }
  },
  {
    schema: createForumPostSchema,
    auth: 'required',
    rateLimit: { requests: 5, window: '1m' }
  }
)